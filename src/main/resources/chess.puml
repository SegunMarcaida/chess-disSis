@startuml



    interface Board{
        getTile(Position): Tile
    }
    class BoxBoard implements Board{
    - board: Array<Array<Tile>>
    `    getTile(position:Position):Tile
     movePiece(position:Position, piece: Piece)
    }
    BoxBoard --o Tile
    BoxBoard --> Piece

    Board --> Position

    class EmptyTile implements Tile{
        - color: string
        hasPiece():Boolean
        getPiece():Piece
        getColor()
    }

    class OccupiedTile implements Tile{
            - color: string
            - piece: Piece
            hasPiece():Boolean
            getPiece():Piece
            getColor()
        }
        OccupiedTile --* Piece

    class Position{
        -posX:Int
        -posY:Int
        getPosition(): [ posX, posY ]
    }

    interface Tile{
    hasPiece():Boolean
    getPiece():Piece
    getColor(): string
    }

    class Move{
    - from: Position
    - to: Position
    getFrom(): Position
    getTo(): Position
    }
    Move --* Position

    interface Rule{
    validate(board:Board): Boolean
    }
    FinishValidator --> Board

    interface Rule{
    validateMove(board:Board, Move:Move):Boolean
    }
    Rule --> Board
    Rule --> Move


    class Piece{
    - name: string
    - color: string
    - Moves:List<Mover>
    movePiece(board:Board,Move:Move): Piece
    getName(): string
    getColor():string
    }
    Piece --Mover
    Piece --> Board
    Piece --> Move

    interface Mover{
    validateMove(board:Board, Move:Move):Boolean
    mover(board:Board, Move:Move):Board
    }
    Mover -- Rule
    Move -- Board

    class Game{
    -board:Board
    -Moves:Stack<Move>
    -finishValidators:List<FinishValidator>
    getBoard()
    move(Move:Move)
    checkWinner():string
    }
    Game --* Board
    Game --o Move

@enduml